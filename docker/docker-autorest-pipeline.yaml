parameters:
  autorestClientFeed: ''
  autorestProjectName: ''
  version: ''
  semVersion: ''
  containerServiceEndpoint: ''
  registry: ''
  project: ''
  helmChartLocation: ''
  helmChartName : ''
  latestName: ''
  imageName: ''
  dockerRunOptions: ''
  autorestTag: 'latest'
  autorestImageName: 'autorest-auto-generator'
  autorestAzureContainerRegistryName: 'iusdev'
  restClientGenerator: 'rest-client-generator'

steps:
  - ${{ if and(eq(parameters.autorestProjectName, 'Tax'), eq(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
    - task: AzureCLI@1
      displayName: Building New Generation Client
      condition: succeeded()
      inputs:
        azureSubscription : ${{ parameters.containerServiceEndpoint }}
        scriptLocation: inlineScript
        inlineScript: |
          mkdir $(Build.ArtifactStagingDirectory)/clientGenerator
          docker run --cpus 0 --net=host --mount type=bind,src=$(Build.ArtifactStagingDirectory)/autorest,dst=/autorest/dist ${{ parameters.autorestAzureContainerRegistryName }}.azurecr.io/${{ parameters.restClientGenerator }}:${{ parameters.autorestTag }} dotnet iUS.RestClientGenerator.dll --project ${{ parameters.autorestProjectName }} --domain ${{ parameters.autorestClientFeed }} --template Service --version ${{ parameters.version }}
          ls -al $(Build.ArtifactStagingDirectory)/clientGenerator

  - ${{ if ne(parameters.autorestProjectName, '') }}:
    - task: AzureCLI@1
      displayName: Building Autorest Client
      condition: succeeded()
      inputs:
        azureSubscription : ${{ parameters.containerServiceEndpoint }}
        scriptLocation: inlineScript
        inlineScript: |
          mkdir $(Build.ArtifactStagingDirectory)/autorest
          docker run --cpus 0 --net=host --mount type=bind,src=$(Build.ArtifactStagingDirectory)/autorest,dst=/autorest/dist ${{ parameters.autorestAzureContainerRegistryName }}.azurecr.io/${{ parameters.autorestImageName }}:${{ parameters.autorestTag }} python3 main.py --projectName ${{ parameters.autorestProjectName }}
          ls -al $(Build.ArtifactStagingDirectory)/autorest
    - task: NuGetCommand@2
      displayName: 'Autorest client NuGet push'
      condition:
        and
        (
          succeeded(),
          or
          (
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            and
            (
              eq(variables['UsingDevelopBranch'], 'true'),
              eq(variables['Build.SourceBranch'], 'refs/heads/devlop')
            )
          )
        )
      inputs:
        command: push
        publishVstsFeed: '${{ parameters.autorestClientFeed }}'
        allowPackageConflicts: false
        packagesToPush: '$(Build.ArtifactStagingDirectory)/autorest/*.nupkg'

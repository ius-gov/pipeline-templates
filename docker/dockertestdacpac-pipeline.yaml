parameters:
  autorestClientFeed: ''
  autorestProjectName: ''
  autorestTemplateType: 'Service'
  version: ''
  semVersion: ''
  containerServiceEndpoint: ''
  registry: ''
  project: ''
  helmChartLocation: ''
  helmChartName : ''
  latestName: ''
  imageName: ''
  stateCode: 0

steps:
  - task: Docker@1
    displayName: Container registry login
    inputs:
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      command: login
  - script: |
      if [[ -f "application/Dockerfile" ]]; then 
        echo "Using included Dockerfile.  Please consider updating to newest pattern"
      elif [[ -f "dockerfile.json" ]]; then
        echo "Generating new Dockerfile from the dockerfile.mustache"
        docker run --net=host -v $(Build.SourcesDirectory):/src ${{ parameters.registry }}/dockerfile-template:latest node /data/state_code_updater /src/dockerfile.json ${{ parameters.stateCode }}
        docker run --net=host -v $(Build.SourcesDirectory):/src ${{ parameters.registry }}/dockerfile-template:latest mustache /src/dockerfile.json /data/Dockerfile.mustache > application/Dockerfile
        cat application/Dockerfile
      else
        echo "Dockerfile is not present and neither is a required dockerfile.json"
        exit 1
      fi
    displayName: Check for Dockerfile
  - task: Docker@1
    displayName: Build image
    inputs:
      command: build
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      dockerFile: application/Dockerfile
      imageName: ${{ parameters.project }}
      arguments: --build-arg version=${{ parameters.version}}
      addDefaultLabels: false    
  - task: Docker@2
    displayName: Build image for initContainer
    inputs:
      command: build
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      dockerFile: Dockerfile
      imageName: ${{ parameters.project }}_initimage
      arguments: --build-arg version=${{ parameters.version}}
      addDefaultLabels: false      
  - task: Docker@1
    displayName: Tag image
    inputs:
      command: tag
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imageName: ${{ parameters.latestName }}
      arguments: ${{ parameters.imageName }}
  - task: Docker@2
    displayName: Tag image for init container
    inputs:
      command: tag
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imageName: ${{ parameters.latestName }}_initimage
      arguments: ${{ parameters.imageName }}
  - task: AzureCLI@1
    displayName: Launching docker image
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        docker --version
        echo 'Creating Appsettings folder at $(Build.ArtifactStagingDirectory)'
        mkdir $(Build.ArtifactStagingDirectory)/appsettings
        echo '{
          "ClientStateID" : 0,
          "AppSettings" : {
             "URLs" : {
               "IdentityServer" : "https://iusbuildidentityserver.azurewebsites.net"
             }
          },
          "Data": {
            "Queue": {
              "GlobalDisable": true
            },
            "Identity": {
               "ApiScope": "api1"
             }
          },
          "Serilog":{
            "MinimumLevel": "Information",
             "Using": [
                 "Serilog.Sinks.Console"
             ],
             "WriteTo": [
                 {
                     "Name": "Console"
                 }
             ]
          },
          "UseIncludedCertificate" : "true",
          "DoNotFetchDiscovery" : "true",
          "DoNotRequireHttps" : "true",
          "BuildServer" : "true",
          "ConfigurationDump" : "true"
         }' > $(Build.ArtifactStagingDirectory)/appsettings/appsettings.Consortium.Production.json
        echo 'Using AppSettings'
        cat $(Build.ArtifactStagingDirectory)/appsettings/appsettings.Consortium.Production.json
        echo 'Starting Docker Image ${{ parameters.latestName }}'
        docker run -d -e "APPSETTING_LOCATION=/data/appsettings" -v $(Build.ArtifactStagingDirectory)/appsettings:/data/appsettings --net=host -p 80:80 ${{ parameters.imageName }}
        sleep 5
        docker ps -a
        latest_guid="$(docker ps -a | grep "${{ parameters.imageName }}" | awk '{print $1}')"
        echo "Checking logs for $latest_guid"
        docker logs $latest_guid
  - task: Docker@1
    displayName: Push version image
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and
          (
            eq(variables['UsingDevelopBranch'], 'true'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.imageName }}
  - task: Docker@2
    displayName: Push version image for initcontainer
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and
          (
            eq(variables['UsingDevelopBranch'], 'true'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.imageName }}_initimage
  - task: Docker@1
    displayName: Push latest image
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and
          (
            eq(variables['UsingDevelopBranch'], 'true'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.latestName }}
  - task: Docker@2
    displayName: Push latest image for initcontainer
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and
          (
            eq(variables['UsingDevelopBranch'], 'true'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.latestName }}_initimage

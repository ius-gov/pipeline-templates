parameters:
  autorestClientFeed: ''
  autorestProjectName: ''
  autorestTemplateType: 'Service'
  version: ''
  semVersion: ''
  containerServiceEndpoint: ''
  registry: ''
  project: ''
  helmChartLocation: ''
  helmChartName : ''
  latestName: ''
  imageName: ''
  stateCode: 0
  restClientGenerator: 'rest-client-generator'
  dockerfilePathAndName: ''
  
steps:
  - task: Docker@1
    displayName: Container registry login
    env:
      dockerfilePathAndName: ${{ parameters.dockerfilePathAndName }}
    inputs:
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      command: login
  - script: |
      if [ -f $dockerfilePathAndName ]; then
        echo "Using Dockerfile at $dockerfilePathAndName"
      elif [[ -f "application/Dockerfile" ]]; then 
        echo "Using included Dockerfile.  Please consider updating to newest pattern"
      elif [[ -f "dockerfile.json" ]]; then
        echo "Generating new Dockerfile from the dockerfile.mustache"
        docker run --net=host -v $(Build.SourcesDirectory):/src ${{ parameters.registry }}/dockerfile-template:latest node /data/state_code_updater /src/dockerfile.json ${{ parameters.stateCode }}
        docker run --net=host -v $(Build.SourcesDirectory):/src ${{ parameters.registry }}/dockerfile-template:latest mustache /src/dockerfile.json /data/Dockerfile.mustache > application/Dockerfile
        cat application/Dockerfile
      else
        echo "Dockerfile is not present and neither is a required dockerfile.json"
        exit 1
      fi
    displayName: Check for Dockerfile
  - ${{ if eq(parameters.dockerfilePathAndName, '') }}:
    - task: Docker@1
      displayName: Build image
      inputs:
        command: build
        azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
        azureContainerRegistry: ${{ parameters.registry }}
        dockerFile: application/Dockerfile
        imageName: ${{ parameters.project }}
        arguments: --build-arg version=${{ parameters.version}}
        addDefaultLabels: false
        
  - ${{ if ne(parameters.dockerfilePathAndName, '') }}:
    - task: Docker@1
      displayName: Build image
      inputs:
        command: build
        azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
        azureContainerRegistry: ${{ parameters.registry }}
        dockerFile: ${{ parameters.dockerfilePathAndName }}
        imageName: ${{ parameters.project }}
        arguments: --build-arg version=${{ parameters.version}}
        addDefaultLabels: false      
      
  - task: Docker@1
    displayName: Tag image
    inputs:
      command: tag
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imageName: ${{ parameters.latestName }}
      arguments: ${{ parameters.imageName }}
  - task: AzureCLI@1
    displayName: Launching docker image
    env:
      project: ${{ parameters.autorestProjectName }}${{ parameters.autorestTemplateType }}
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        docker --version
        
        for f in $(find . -print | grep -i launchsettings.json)
        do
          echo "Searching $f..."
          echo "testing grep -q 'ConnectionStrings__$project' $f"
          if grep -q "ConnectionStrings__$project" $f ; then
            connectionString=$((grep ConnectionStrings__$project $f | grep "Connection Timeout" -m 1 | cut -d ':' -f2-) | sed 's/,*\r*$//')
            found=true
          else
            found=false
          fi
        done
        
        if [ $found == false ]; then
        for f in $(find . -print | grep -i launchsettings.json)
        do
          echo "Searching for 'ConnectionStrings:$project' $f..."
          echo "testing grep -q 'ConnectionStrings:$project' $f"
          if grep -q "ConnectionStrings:$project" $f ; then
            connectionString=$(grep ConnectionStrings:$project $f | grep "Connection Timeout" -m 1 | cut -d ':' -f3- | sed 's/,*\r*$//')
            found=true
          else
            found=false
          fi
        done
        fi
        
        echo $"Found for $project = $found"
        
        echo 'Creating Appsettings folder at $(Build.ArtifactStagingDirectory)'
        mkdir $(Build.ArtifactStagingDirectory)/appsettings
        if [ $found == false ];
        then
          echo "{
          \"CanonicalApplicationName\": \"$project\",
          \"ClientStateID\" : 0,
          \"AppSettings\" : {
          \"URLs\" : {
          \"IdentityServer\" : \"https://iusbuildidentityserver.azurewebsites.net\"
          }
        },
        \"ConfigurationSettings\": {
          \"ManifestLocation\": \"WithAppSettings\"
        },
        \"Data\": {
          \"Queue\": {
            \"GlobalDisable\": true
          },
          \"Identity\": {
            \"ApiScope\": \"api1\"
          }
        },
        \"Serilog\":{
          \"MinimumLevel\": \"Information\",
          \"Using\": [
            \"Serilog.Sinks.Console\"
          ],
          \"WriteTo\": [
            {
              \"Name\": \"Console\"
            }
          ]
        },
        \"UseIncludedCertificate\" : \"true\",
        \"DoNotFetchDiscovery\" : \"true\",
        \"DoNotRequireHttps\" : \"true\",
        \"BuildServer\" : \"true\",
        \"ConfigurationDump\" : \"true\"
        }" > $(Build.ArtifactStagingDirectory)/appsettings/appsettings.Consortium.Production.json
        else
          echo "{
          \"CanonicalApplicationName\": \"$project\",
          \"ClientStateID\" : 0,
          \"AppSettings\" : {
            \"URLs\" : {
             \"IdentityServer\" : \"https://iusbuildidentityserver.azurewebsites.net\"
           }
          },
          \"ConfigurationSettings\": {
            \"ManifestLocation\": \"WithAppSettings\"
          },
          \"Data\": {
            \"Queue\": {
              \"GlobalDisable\": true
            },
            \"Identity\": {
               \"ApiScope\": \"api1\"
             }
          },
          \"Serilog\":{
            \"MinimumLevel\": \"Information\",
             \"Using\": [
                 \"Serilog.Sinks.Console\"
             ],
             \"WriteTo\": [
                 {
                     \"Name\": \"Console\"
                 }
             ]
          },
          \"UseIncludedCertificate\" : \"true\",
          \"DoNotFetchDiscovery\" : \"true\",
          \"DoNotRequireHttps\" : \"true\",
          \"BuildServer\" : \"true\",
          \"ConfigurationDump\" : \"true\",\"ConnectionStrings:$project\": $connectionString
        }" > $(Build.ArtifactStagingDirectory)/appsettings/appsettings.Consortium.Production.json
        fi
        dos2unix $(Build.ArtifactStagingDirectory)/appsettings/appsettings.Consortium.Production.json
        echo 'Using AppSettings'
        cat $(Build.ArtifactStagingDirectory)/appsettings/appsettings.Consortium.Production.json
        echo 'Starting Docker Image ${{ parameters.latestName }}'
        docker run -d -e "APPSETTING_LOCATION=/data/appsettings" -v $(Build.ArtifactStagingDirectory)/appsettings:/data/appsettings --net=host -p 80:80 ${{ parameters.imageName }}
        sleep 5
        docker ps -a
        latest_guid="$(docker ps -a | grep "${{ parameters.imageName }}" | awk '{print $1}')"
        echo "Checking logs for $latest_guid"
        docker logs $latest_guid
  - task: AzureCLI@1
    displayName: Running Health Check
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        echo 'Testing Health'
        curl http://localhost/health -o health.json -m 90
        echo 'health result:'
        health=$(cat health.json)
        health=$(printf "%s\n" "${health##*status_code}")
        healthexitcode=$(echo ${health:2:1})
        docker ps -a
        latest_guid="$(docker ps -a | grep "${{ parameters.imageName }}" | awk '{print $1}')"
        echo "Checking logs for $latest_guid"
        docker logs $latest_guid
        if [ $healthexitcode != 0 ]; then
          exit $healthexitcode
        fi
  # All services as -test
  - ${{ if and(not(startsWith(parameters.autorestProjectName, 'icon')), or(eq(parameters.autorestTemplateType, 'Service'), eq(parameters.autorestTemplateType, 'Gateway'))) }}:
    - task: AzureCLI@1
      displayName: Building New Generation Client
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), and(eq(variables['UsingDevelopBranch'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))))
      inputs:
        azureSubscription : ${{ parameters.containerServiceEndpoint }}
        scriptLocation: inlineScript
        inlineScript: |
          docker network create crossChatter
          docker run -d --name swagger-converter --net crossChatter iusdev.azurecr.io/swagger-converter
          docker run -d -e "APPSETTING_LOCATION=/data/appsettings" --name ${{ parameters.autorestProjectName }} -v $(Build.ArtifactStagingDirectory)/appsettings:/data/appsettings --net=crossChatter ${{ parameters.imageName }}
          docker run --net=crossChatter ${{ parameters.registry }}/${{ parameters.restClientGenerator }}:latest dotnet iUS.RestClientGenerator.dll --project ${{ parameters.autorestProjectName }} --domain ${{ parameters.autorestClientFeed }} --template ${{ parameters.autorestTemplateType }} --version ${{ parameters.version }} --swaggerEndpoint http://${{ parameters.autorestProjectName }} --swaggerToOpenAPIEndpoint http://swagger-converter:8080/api/convert --isNotATest
  - ${{ if startsWith(parameters.autorestProjectName, 'icon') }}:
    - task: AzureCLI@1
      displayName: Building Autorest Client
      condition: succeeded()
      inputs:
        azureSubscription : ${{ parameters.containerServiceEndpoint }}
        scriptLocation: inlineScript
        inlineScript: |
          mkdir $(Build.ArtifactStagingDirectory)/autorest
          docker run --net=host --mount type=bind,src=$(Build.ArtifactStagingDirectory)/autorest,dst=/autorest/dist ${{ parameters.registry }}/autorest-auto-generator:latest python3 main.py --projectName ${{ parameters.autorestProjectName }} --templateType ${{ parameters.autorestTemplateType }} --sourceBranch $(Build.SourceBranch) --useDevelopBranch $(UsingDevelopBranch)
          dockerexitcode=$?
          ls -al $(Build.ArtifactStagingDirectory)/autorest
          if [ $dockerexitcode != 0 ]; then
            exit $dockerexitcode
          fi
    - task: NuGetCommand@2
      displayName: 'Autorest client NuGet push'
      condition:
        and
        (
          succeeded(),
          or
          (
            eq(variables['Build.SourceBranch'], 'refs/heads/master'),
            and
            (
              eq(variables['UsingDevelopBranch'], 'true'),
              eq(variables['Build.SourceBranch'], 'refs/heads/develop')
            )
          )
        )
      inputs:
        command: push
        publishVstsFeed: '${{parameters.autorestClientFeed}}'
        allowPackageConflicts: false
        packagesToPush: '$(Build.ArtifactStagingDirectory)/autorest/*.nupkg'
  - task: Docker@1
    displayName: Push version image
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and
          (
            eq(variables['UsingDevelopBranch'], 'true'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.imageName }}
  - task: Docker@1
    displayName: Push latest image
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and
          (
            eq(variables['UsingDevelopBranch'], 'true'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
    inputs:
      command: push
      azureSubscriptionEndpoint: ${{ parameters.containerServiceEndpoint }}
      azureContainerRegistry: ${{ parameters.registry }}
      imagename: ${{ parameters.latestName }}
  - template: ../helm/helm-chart-pipeline-template.yaml
    parameters:
      project: '${{ parameters.project }}'
      version: '${{ parameters.version }}'
      semVersion: '${{ parameters.semVersion }}'
      containerServiceEndpoint: '${{ parameters.containerServiceEndpoint }}'
      helmChartLocation: '${{ parameters.helmChartLocation }}'
      helmChartName : '${{ parameters.helmChartName }}'

parameters:
  containerServiceEndpoint: 'iUSDevContainer'
  helmChartLocation: ''
  helmChartName : ''
  registry: 'iusdev'
  additionalPublicRegistries: ''
  childChartsToUpdate: ''
  lintYaml: true
steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
  - ${{ if parameters.lintYaml }}:    
    - script: |
        printf "== Installing Requirements"
        python3 -m pip install -r .yamllint/requirements.txt
        printf ""
        printf "== Running YAML Linter"
        sh .yamllint/yamllintall.sh
      displayName: YAML Linting
  - task: AzureCLI@1
    displayName: Initialize Helm3
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        export HELM_EXPERIMENTAL_OCI=1
        curl -L https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash -s -- --version v3.3.1
        helm version
        helm env
        mkdir /home/vsts/.config
        mkdir /home/vsts/.config/helm
        ls /home/vsts/.config/helm
        helm repo add stable https://kubernetes-charts.storage.googleapis.com
        helm repo add bitnami https://charts.bitnami.com/bitnami
        echo "Adding iusdev acr repo"
        helm repo add iusdev https://iusdev.azurecr.io/helm/v1/repo --username iusdev --password $(iusdevPassword)
        helm registry login https://iusdev.azurecr.io/helm/v1/repo --username iusdev --password $(iusdevPassword)
        echo "Adding iusiddevcharts acr repo"
        helm repo add iusiddevcharts https://iusiddevcharts.azurecr.io/helm/v1/repo --username iusiddevcharts --password $(iusiddevchartsPassword)
        helm registry login https://iusiddevcharts.azurecr.io/helm/v1/repo --username iusiddevcharts --password $(iusiddevchartsPassword)
        helm repo list
  - task: AzureCLI@1
    displayName: package helm chart ${{ parameters.helmChartName }}
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        export HELM_EXPERIMENTAL_OCI=1
        echo "Setting version to $(semVersion)"
        sed -i 's/0\.0\.0-INTERNAL/$(semVersion)/g' ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/Chart.yaml
        sed -i 's/0\.0\.0-INTERNAL/$(version)/g' ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/values.yaml
        sed -i 's/0\.0\.0-INTERNAL/$(semVersion)/g' ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/requirements.yaml
        echo "Chart.yaml"
        cat ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/Chart.yaml
        echo "values.yaml"
        cat ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/values.yaml
        echo "requirements.yaml"
        cat ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/requirements.yaml
        childCharts=("${{ parameters.childChartsToUpdate }}")
        for i in ${childCharts[@]}; 
        do 
        echo "updating $i"
        helm dependency update  $i;
        status=$?
        if [ $status -eq 0 ] 
        then
          echo "dep up on $i command was successful" 
        else 
          echo "dep up on $i failed"
          exit status
        fi
        ls -la $i/charts
        done
        helm dependency update   ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}
        ls -la ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}/charts
        helm chart save $(helm package ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }} | grep -o '/.*.tgz' ) ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }}:${{ parameters.semVersion }}
        helm chart save ${{ parameters.helmChartLocation }}/${{ parameters.helmChartName }} ${{ parameters.registry }}.azurecr.io/${{ parameters.helmChartName }}:${{ parameters.semVersion }}
  - task: AzureCLI@1
    displayName: publish helm chart ${{ parameters.helmChartName }}
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and
          (
            eq(variables['UsingDevelopBranch'], 'true'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop')
          )
        )
      )
    inputs:
      azureSubscription : ${{ parameters.containerServiceEndpoint }}
      scriptLocation: inlineScript
      inlineScript: |
        export HELM_EXPERIMENTAL_OCI=1
        helm chart push ${{ parameters.registry }}.azurecr.io/${{ parameters.helmChartName }}:${{ parameters.semVersion }}
  - task: PublishBuildArtifacts@1
    displayName: Publish Helm Chart ${{ parameters.helmChartName }} as a build artifact
    inputs:
      pathtoPublish : '${{ parameters.helmChartName }}-$(semVersion).tgz'
      artifactName: helmChart
